/*Define our color palette using variables so we can reuse them in multiple places */
:root {
  --border-radius: 30px;
  --color-primary: #2584ff;
  --color-secondary: #00d9ff;
  --color-accent: #ff3400;
  /*text colors*/
  --color-headings: #1b0760;
  --color-body: #918ca4;
  --color-body-darker: #5c5577;
  --color-border: #ccc;
}

/*define a rule using the universal selector*/
/*
* -->all elements
*::after, *::before -->  all elements dinamically inserted
*/

*,
*::after,
*::before {
  box-sizing: border-box; /*this will provide that block buttons (.btn--block) inside or outside anchor <a> elements will have the same behaviour*/
}

/*--------TYPOGRAPHY----------------------*/

html {
  /*font-size: 16x; -> 16px is the default size*/
  /* 62.5% of 16px = 10px*/
  font-size: 62.5%;
}

body {
  font-family: Inter, Arial, Helvetica, sans-serif;
  font-size: 2.4rem;
  line-height: 1.5;
  color: var(--color-body);
}

h1,
h2,
h3 {
  color: var(--color-headings);
  margin-bottom: 1rem;
}

/*1 rem = 1 x font size of the html element*/
/*since html font size is 62.5% * 16px = 10px = 1 rem*/
h1 {
  font-size: 7rem;
}

h2 {
  font-size: 4rem;
}

h3 {
  font-size: 3rem;
}

p {
  margin-top: 0; /*to avoid margin colapsing with h3 margin-bottom*/
}

@media screen and (min-width: 1024px) {
  body {
    font-size: 1.8rem;
  }

  h1 {
    font-size: 8rem;
  }

  h2 {
    font-size: 4rem;
  }

  h3 {
    font-size: 2.4rem;
  }
}

/*--------LINKS----------------------*/

a {
  text-decoration: none;
}

.link-arrow {
  color: var(--color-accent);
  text-transform: uppercase;
  font-size: 2rem;
  font-weight: bold;
}

.link-arrow::after {
  content: "-->";
  margin-left: 5px;
  transition: margin 0.15s;
}

/*just target the arrow element inserted with ::after*/
.link-arrow:hover::after {
  margin-left: 10px;
}

/*adjust the link size for desktop wider screens*/

@media screen and (min-width: 1024px) {
  .link-arrow {
    font-size: 1.5rem;
  }
}

/*--------BADGES----------------------*/

/*Applying object oriented CSS principles!
    Separate stucture from skin:
       define classes: 
            - one for basic structure - padding and font size 
            - other classes for different skins like colors and sizes */

/*defining the stucture*/
.badge {
  border-radius: 20px;
  font-size: 2rem;
  font-weight: 600;
  padding: 0.5rem 2rem; /*vertical and horizontal*/
  white-space: nowrap; /*prevents the badge from wrapping into a second line.*/
}

/*defining the skin
    using the BAM (block element modifier) naming convention
      - we use -- to separate a block or a component from a modifier */
.badge--primary {
  background: var(--color-primary);
  color: #fff;
}

.badge--secondary {
  background: var(--color-secondary);
  color: #fff;
}

.badge--small {
  font-size: 1.6rem;
  padding: 0.5rem 1.5rem;
}

/*adjust the badges size for desktop wider screens*/

@media screen and (min-width: 1024px) {
  .badge {
    font-size: 1.5rem;
  }

  .badge--small {
    font-size: 1.2rem;
  }
}

/*--------LISTS----------------------*/

/* we have 2 types of lists (in common they dont have the default bullet points:
      - horizontal or inline lists (with the badges or the nav bar)
      - vertical lists (with green ticks or the ones in the footer)  */

/*this list class can represent either vertical or horizontal lists*/
.list {
  list-style: none; /*gets rid of the default bullet point*/
  padding-left: 0; /*gets rid of the default padding*/
  color: var(--color-headings);
}

/*create an inline list (variation/modifier of the .list) applying Object oriented CSS principles (separate structure from skin*/
.list--inline .list__item {
  display: inline-block; /*inline-block will allow to apply margins */
  margin-right: 2rem;
}

.list--tick {
  list-style-image: url(../icons/tick.svg);
  padding-left: 3rem;
}

.list--tick .list__item {
  padding-left: 0.5rem;
  margin-bottom: 1rem;
}

/*adjust the lists for desktop wider screens*/

@media screen and (min-width: 1024px) {
  .list--tick .list__item {
    padding-left: 0rem;
  }
}

/*--------ICONS----------------------*/

/*using https://svgsprit.es/ gets all the svg files in just one*/

/*structure*/
.icon {
  width: 40px;
  height: 40px;
}

.icon--small {
  width: 30px;
  height: 30px;
}

/*skin*/
/* -- indicates that is not a new class but a variation or a modifier for the icon class*/
.icon--primary {
  fill: var(--color-primary);
}

.icon--white {
  fill: #fff;
}

.icon-container {
  background: #f3f9fa;
  width: 64px;
  height: 64px;
  border-radius: 100%; /*round shape*/
  display: inline-flex; /*since the the span element is an inline element*/
  /*center the icon in the round circle, 2 properties: */
  /* first- aligning along the primary axis, by default the horizontal */
  justify-content: center;
  /* second - aligning along the secondary axis, by default the vertical */
  align-items: center;
}

.icon-container--accent {
  background: var(--color-accent);
}

/*--------BUTTONS----------------------*/

/* In terms of the size we have 2 types of buttons:
    - some just strech to fit their content (the search button)
    - other strech to fill all the available space (block buttons - width of 100%)*/

/*structure*/
.btn {
  border-radius: 40px;
  border: 0;
  cursor: pointer;
  font-size: 1.8rem;
  font-weight: 600;
  margin: 1rem 0; /*vertical and horizontal. To separate the button from other elements*/
  padding: 2rem 3rem; /*vertical and horizontal*/
  text-transform: uppercase;
  white-space: nowrap; /*In case we have limited space dont want the text in the button to wrap onto a second line */
  text-align: center; /*To make sure the text is always in the center of the button*/
}

/*skins*/
.btn--primary {
  background: var(--color-primary);
  color: #fff;
}

.btn--primary:hover {
  background: #3a8ffe; /*with SASS use function lighten(primary, 10%) */
}

.btn--secondary {
  background: var(--color-secondary);
  color: #fff;
}

.btn--secondary:hover {
  background: #00c8eb;
}

.btn--accent {
  background: var(--color-accent);
  color: #fff;
}

.btn--accent:hover {
  background: #ec3000;
}

.btn--outline {
  background: #fff;
  color: var(--color-headings);
  border: 2px solid var(--color-headings);
}

.btn--outline:hover {
  background: var(--color-headings);
  color: #fff;
}

/*skin for block buttons*/
.btn--block {
  width: 100%;
  display: inline-block; /*anchor elements are inline by default*/
}

/*adjust the buttons for desktop version*/

@media screen and (min-width: 1024px) {
  .btn {
    font-size: 1.5rem;
  }
}

/*--------INPUTS----------------------*/

.input {
  border-radius: var(--border-radius);
  border: 1px solid var(--color-border);
  color: var(--color-headings);
  font-size: 2rem;
  outline: 0;
  padding: 1.5rem 3.5rem;
}

/*change the placeholder - use a pseudo element selector*/
::placeholder {
  color: #cdcbd7;
}

/*adjust the inputs for desktop version*/

@media screen and (min-width: 1024px) {
  .input {
    font-size: 1.5rem;
  }
}

/*--------INPUT GROUPS----------------------*/

/*we are grouping the input element with a button. We can group with an icon or any other elements*/

/*this class is a div component wraped arround the input and the button components
so were making it look like if its a input component*/
/*Div is a block level element to it takes the width of the page streching to the end*/
.input-group {
  border: 1px solid var(--color-border);
  border-radius: var(--border-radius);
  display: flex;
}

/*remove the border from the input component inside the div class .input-group*/
/*using nesting*/
.input-group .input {
  border: 0;
  flex-grow: 1; /*the input field will grouw to take all the available space inside the div*/
  padding: 1.5rem 1rem;
}

/*define the margin of the button inside the .input-group*/
.input-group .btn {
  margin: 4px;
}

/*--------CARDS----------------------*/

/*structure*/

/*this is a div, a block level element, dont apply width because this component should be 
fluid and flexible so we can put is in any container. The size will be determined by the container*/
.card {
  border-radius: 7px;
  box-shadow: 0 0 20px 10px #f3f3f3; /*0 0 for horizontal and vertical offset, 20px for blurring the shadow making it softer, 10px for spreading the shadow  */
  overflow: hidden;
}

/*apply same padding to both elements so they align properly*/
.card__header,
.card__body {
  padding: 2rem 3rem;
}

/*skins*/

.card--primary .card__header {
  background: var(
    --color-primary
  ); /*since we give the header a color it has grown larger than its parent/container (the card element) --> overflow, this makes the round corners on top disapear. Need to set the overflow property on the parent/container*/
  color: #fff;
}

.card--secondary .card__header {
  background: var(--color-secondary);
  color: #fff;
}

.card--secondary .badge--secondary {
  background: #02cdf1;
}

/*--------PLANS----------------------*/

.plan__name {
  color: #fff;
  margin: 0;
  font-weight: 500;
  font-size: 2.4rem;
}

.plan__price {
  font-size: 6rem;
}

.plan__billing-cycle {
  font-size: 2.4rem;
  font-weight: 300;
  opacity: 0.8;
  margin-right: 1rem;
}

.plan__description {
  font-size: 2rem;
  font-weight: 300;
  letter-spacing: 1px;
  opacity: 0.8;
  display: block; /*Because the descritpion is a span element, its inline, so with extra space it comer after the badge. So we need to make it a block level element */
}

.plan .list__item {
  margin-bottom: 2rem;
}

/* *** make the parent/container (.card__header) a relatively position element */
.plan--popular .card__header {
  position: relative;
}

/*Setting the Popular badge*/
/*We use the plan--popular class to dinamically insert he popular icon svg image using pseudo element selectors.
Insert the image before the content of the header element*/
.plan--popular .card__header::before {
  content: url(../icons/popular.svg);
  width: 40px;
  display: inline-block; /*because its a div which is a inline element need to change to inline block so the width works*/
  /*move the icon using absolute positioning
  We should make the parent or the container (.card__header) a relatively position element ...so we need to define another rule*** */
  position: absolute;
  top: -6px;
  right: 5%;
}

/*adjust the Plans for desktop version*/

@media screen and (min-width: 1024px) {
  .plan__name {
    font-size: 1.4rem;
  }

  .plan__price {
    font-size: 5rem;
  }

  .plan__billing-cycle {
    font-size: 1.6rem;
  }

  .plan__description {
    font-size: 1.7rem;
  }
}

/*--------MEDIA OBJECTS/COMPONENTS----------------------*/

.media {
  display: flex;
}

.media__title {
  margin-top: 0;
}

.media__body {
  margin: 0 2rem; /*vertical = 0; horizontal = 2rem*/
}

.media__image {
  margin-top: 1rem;
}

/*--------QUOTES----------------------*/

.quote {
  font-size: 3rem;
  font-style: italic;
  color: var(--color-body-darker);
  line-height: 1.3;
}

.quote__text::before {
  content: open-quote;
}

.quote__text::after {
  content: close-quote;
}

.quote__author {
  font-size: 3rem;
  font-weight: 500;
  font-style: normal;
  margin-bottom: 0;
}

.quote__company {
  color: var(--color-headings);
  font-size: 2rem;
  font-style: normal;
  opacity: 0.4;
}

/*use relative positioning*/
.quote__line {
  position: relative;
  bottom: 10px;
}

/*adjust the Quotes for desktop version*/

@media screen and (min-width: 1024px) {
  .quote {
    font-size: 2rem;
  }

  .quote__author {
    font-size: 2.4rem;
  }

  .quote__company {
    font-size: 1.6rem;
  }
}

/*--------GRIDS----------------------*/

.grid {
  display: grid;
}

/*adjust the grid for tablets version*/

@media screen and (min-width: 768px) {
  .grid--1x2 {
    grid-template-columns: 1fr 1fr; /*or use repeat(2, 1fr)*/
  }
}

/*adjust the grid for desktop version*/

@media screen and (min-width: 1024px) {
  .grid--1x3 {
    grid-template-columns: repeat(3, 1fr);
  }
}

/*--------TESTIMONIALS----------------------*/

.testimonial {
  padding: 3rem;
}

.testimonial__image {
  position: relative;
}

.testimonial__image > img {
  width: 100%; /*making the image responsive and resizes along with the width of the column*/
}

.testimonial__image > .icon-container {
  position: absolute;
  top: 3rem;
  right: -32px; /*.icon-container(width: 64px, height:64px, if we want the icon in the center just divide this by 2*/
}

/*adjust the testimonial for tablets version*/

@media screen and (min-width: 768px) {
  .testimonial .quote,
  .testimonial .quote__author {
    font-size: 2.4rem;
  }

  .testimonial .quote {
    margin-left: 6rem;
  }
}
