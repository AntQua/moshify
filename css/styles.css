/*Define our color palette using variables so we can reuse them in multiple places */
:root {
  --color-primary: #2584ff;
  --color-secondary: #00d9ff;
  --color-accent: #ff3400;
  /*text colors*/
  --color-headings: #1b0760;
  --color-body: #918ca4;
}

/*--------TYPOGRAPHY----------------------*/

html {
  /*font-size: 16x; -> 16px is the default size*/
  /* 62.5% of 16px = 10px*/
  font-size: 62.5%;
}

body {
  font-family: Inter, Arial, Helvetica, sans-serif;
  font-size: 2.4rem;
  line-height: 1.5;
  color: var(--color-body);
}

h1,
h2,
h3 {
  color: var(--color-headings);
  margin-bottom: 1rem;
}

/*1 rem = 1 x font size of the html element*/
/*since html font size is 62.5% * 16px = 10px = 1 rem*/
h1 {
  font-size: 7rem;
}

h2 {
  font-size: 4rem;
}

h3 {
  font-size: 3rem;
}

p {
  margin-top: 0; /*to avoid margin colapsing with h3 margin-bottom*/
}

@media screen and (min-width: 1024px) {
  body {
    font-size: 1.8rem;
  }

  h1 {
    font-size: 8rem;
  }

  h2 {
    font-size: 4rem;
  }

  h3 {
    font-size: 2.4rem;
  }
}

/*--------LINKS----------------------*/

a {
  text-decoration: none;
}

.link-arrow {
  color: var(--color-accent);
  text-transform: uppercase;
  font-size: 2rem;
  font-weight: bold;
}

.link-arrow::after {
  content: "-->";
  margin-left: 5px;
  transition: margin 0.15s;
}

/*just target the arrow element inserted with ::after*/
.link-arrow:hover::after {
  margin-left: 10px;
}

/*adjust the link size for desktop wider screens*/

@media screen and (min-width: 1024px) {
  .link-arrow {
    font-size: 1.5rem;
  }
}

/*--------BADGES----------------------*/

/*Applying object oriented CSS principles!
    Separate stucture from skin:
       define classes: 
            - one for basic structure - padding and font size 
            - other classes for different skins like colors and sizes */

/*defining the stucture*/
.badge {
  border-radius: 20px;
  font-size: 2rem;
  font-weight: 600;
  padding: 0.5rem 2rem; /*vertical and horizontal*/
  white-space: nowrap; /*prevents the badge from wrapping into a second line.*/
}

/*defining the skin
    using the BAM (block element modifier) naming convention
      - we use -- to separate a block or a component from a modifier */
.badge--primary {
  background: var(--color-primary);
  color: #fff;
}

.badge--secondary {
  background: var(--color-secondary);
  color: #fff;
}

.badge--small {
  font-size: 1.6rem;
}

/*adjust the badges size for desktop wider screens*/

@media screen and (min-width: 1024px) {
  .badge {
    font-size: 1.5rem;
  }

  .badge--small {
    font-size: 1.2rem;
  }
}

/*--------LISTS----------------------*/

/* we have 2 types of lists (in common they dont have the default bullet points:
      - horizontal or inline lists (with the badges or the nav bar)
      - vertical lists (with green ticks or the ones in the footer)  */

/*this list class can represent either vertical or horizontal lists*/
.list {
  list-style: none; /*gets rid of the default bullet point*/
  padding-left: 0; /*gets rid of the default padding*/
  color: var(--color-headings);
}

/*create an inline list (variation/modifier of the .list) applying Object oriented CSS principles (separate structure from skin*/
.list--inline .list__item {
  display: inline-block; /*inline-block will allow to apply margins */
  margin-right: 2rem;
}

.list--tick {
  list-style-image: url(../icons/tick.svg);
  padding-left: 3rem;
}

.list--tick .list__item {
  padding-left: 0.5rem;
  margin-bottom: 1rem;
}

/*adjust the lists for desktop wider screens*/

@media screen and (min-width: 1024px) {
  .list--tick .list__item {
    padding-left: 0rem;
  }
}

/*--------ICONS----------------------*/

/*structure*/
.icon {
  width: 40px;
  height: 40px;
}

/*skin*/
/* -- indicates that is not a new class but a variation or a modifier for the icon class*/
.icon--primary {
  fill: var(--color-primary);
}

.icon-container {
  background: #f3f9fa;
  width: 64px;
  height: 64px;
  border-radius: 100%; /*round shape*/
  display: inline-flex; /*since the the span element is an inline element*/
  /*center the icon in the round circle, 2 properties: */
  /* first- aligning along the primary axis, by default the horizontal */
  justify-content: center;
  /* second - aligning along the secondary axis, by default the vertical */
  align-items: center;
}
